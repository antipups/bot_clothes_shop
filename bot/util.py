from typing import Union
from telebot import TeleBot
from telebot.types import BotCommand, CallbackQuery, Message, BotCommandScope
from bot.config import *
import database.util as db_util
from bot import markups


bot = TeleBot(token=Constants.Telegram.Token,
              parse_mode='html')


# bot.set_my_commands([BotCommand(command, description) for command, description in COMMAND_DESCRIPTIONS.items()],
#                     language_code='ru')
# bot.set_my_commands([BotCommand(command, description) for command, description in COMMAND_DESCRIPTIONS_ON_UZB.items()],
#                     language_code='uz')


def start_bot():
    logger.info('Bot Started')
    bot.remove_webhook()
    bot.infinity_polling()


def send_message(chat_id: int, text: str, reply_markup=None, disable_web_page_preview: bool = False):
    try:
        bot.send_message(chat_id=chat_id,
                         text=text,
                         reply_markup=reply_markup,
                         disable_web_page_preview=disable_web_page_preview)
    except Exception as e:
        logger.error(f'Error in send_message cause - {e}, chat_id - {chat_id}')


def get_info_from_message(message: Union[Message, CallbackQuery], callback_str: str = '') -> tuple[int, str, int]:
    """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—å-—Ç–æ –∫–æ–ª–±–µ–∫–∞ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ
    :param callback_str: –∫–æ–ª–ª–±–µ–∫ –Ω–∞—á–∞–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å
    :param message: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∞–π–¥–∏, —Ç–µ–∫—Å—Ç, –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if isinstance(message, Message):
        if message.content_type != 'text':
            return message.from_user.id, message.caption, message.message_id
        else:
            return message.from_user.id, message.text, message.message_id
    else:
        return message.from_user.id, message.data[len(callback_str) - 2:], message.message.message_id


def schedule_message(chat_id: int, text: str, method, reply_markup=None):
    """
        –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞, —á—Ç–æ–± –ø–∏—Å–∞—Ç—å –º–µ–Ω—å—à–µ —Å—Ç—Ä–æ–∫
    :param reply_markup:
    :param chat_id: –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    :param text:    —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param method:  –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥
    :param markup:  –Ω—É–∂–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    :return:
    """
    try:
        msg = bot.send_message(chat_id=chat_id,
                               text=text,
                               reply_markup=reply_markup,
                               parse_mode='html')
    except Exception as e:      # –µ—Å–ª–∏ –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —à–∞–≥–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ \n {e}')
    else:
        bot.register_next_step_handler(msg, method)
        return msg


def delete_message(chat_id: int,
                   message_id: int):
    """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –æ—Ç–ª–æ–≤–æ–º —ç–∫—Å–µ–ø—à–∏–Ω–∞
    :param chat_id:
    :param message_id:
    :return:
    """
    try:
        bot.delete_message(chat_id=chat_id,
                           message_id=message_id)
    except Exception as e:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ \n {e}')


def callback_handler(message: CallbackQuery, callback: str) -> bool:
    return message.data.startswith(callback[:-2])


def category_tree(current_category_id: str, text: str, last_selected: bool = False) -> str:
    """
        –í—ã–≤–æ–¥ –∑–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param current_category_id: —Ç–µ–∫—É—â–∏–π –∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param last_selected: –≤—ã–¥–µ–ª—è—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é
    :return: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    result = text

    if current_category_id:
        if current_category_id == 'None':
            return Messages.Admin.Categories.SelectedCategory.format('–ì–ª–∞–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')

        categories = list(category.title for category in db_util.CategoryWork().get_all_parents(category_id=current_category_id)[::-1])

        if last_selected:
            categories[-1] = '<u>' + categories[-1] + '</u>'
            result = Messages.Admin.Categories.SelectedCategory.format(' -> '.join(categories))

        else:
            result += '\nüß≠ –í—ã –∑–¥–µ—Å—å: <b>{}</b>'
            result = result.format(' -> '.join(categories))

    return result
